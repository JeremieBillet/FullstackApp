package com.hninstitut.fullstack_devops_project.backend.web_services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hninstitut.fullstack_devops_project.backend.dao.UserRepository;
import com.hninstitut.fullstack_devops_project.backend.entity.User;

@CrossOrigin(value="*")
@RestController
@RequestMapping(value="users")
public class UserRest {
	
	@Autowired
	private UserRepository userRepository;

	public void setUserRepository(UserRepository userRepository) {
		this.userRepository = userRepository;
	}
	
	
	/*--------- méthode à exposer ------------- */
	/**
	 * expose la liste des users
	 * @return
	 */
	@GetMapping()
	public List<User> getAllUser(){
		return userRepository.findAll();
	}
	
	/**
	 * expose un user
	 * @param id
	 * @return
	 */
	@GetMapping(value = "/{id}")
	public User getUserById(@PathVariable("id") Long id) {
		 User user = null;
		 Optional<User> optUser = userRepository.findById(id);
		 
		 if (optUser.isPresent()) user = optUser.get();
		
		return 	user;
	}
	
	/**
	 * ajoute un user à la bdd
	 * @param user
	 * @return
	 */
	@PostMapping()
	public ResponseEntity<User> saveUser(@RequestBody User user){
		User userAdded = userRepository.save(user);
		return new ResponseEntity<User>(userAdded, HttpStatus.OK);
	}

	/**
	 * update un user
	 * @param user
	 * @param id
	 * @return
	 */
	@PutMapping(value="/{id}")
	public ResponseEntity<User> updateUser(@RequestBody User user, @PathVariable("id") Long id){
		User userToUpdate = userRepository.getOne(id);
		
		userToUpdate.setLastName(user.getLastName());
		userToUpdate.setFirstName(user.getFirstName());
		userToUpdate.setUserType(user.getUserType());
		
		User userUpdated = userRepository.save(userToUpdate);
		return new ResponseEntity<User>(userUpdated, HttpStatus.OK);
	}
	
	/**
	 * supprime un user
	 * @param id
	 * @return
	 */
	@DeleteMapping(value="/{id}")
	public ResponseEntity<Boolean> deleteUser(@PathVariable("id") Long id){
		userRepository.deleteById(id);
		return new ResponseEntity<>(Boolean.TRUE, HttpStatus.OK);
	}
	
	
}
